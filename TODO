+==============================+
| rpminspect and librpminspect |
+==============================+

The tests below are the categories handled by rpmdiff-checker, which
is the ancestor to rpminspect.  Red Hat associates may recognize these
as the grid categories on the rpmdiff webui.  Each test category may
perform a couple of tests.  As tests are documented and implemented,
the specifics will be noted during the work in progress.

* indicates the logic for the tests has moved to librpminspect
! means the work is in-progress


Unranked tests categories to migrate (might also decide to skip them):
----------------------------------------------------------------------
 TEST_SCRIPT
 TEST_TRIGGERS


Other:
    - Check for presence of required external program in abidiff,
      kmidiff, and other functions that fork and exec another program.

    - Add a 'rebase' inspection that just fails if packages are being
      rebased but not on the rebaseable list.  This should be off by
      default but then enabled in a maintenance profile.  Maybe???

    - Modify downloading builds and packages to go to a download cache
      directory.  Modify -k/--keep so it retains builds in the
      download cache and then -k with -d (debug) specified, keep the
      builds but also the workdir files.

    - Add a command line option to set the build type for local builds
      (e.g., need a way to specify a local subdirectory is a regular
      Koji build or a module).

Test categories that have been migrated:
----------------------------------------
*TEST_CHANGED (changedfiles)
*TEST_DESKTOP (desktop)
*TEST_EMPTYRPM (emptyrpm)
*TEST_FILELIST (addedfiles and removedfiles)
*TEST_JAVABYTECODE (javabytecode)
*TEST_MANPAGE (manpage)
*TEST_OWNERSHIP (ownership)
*TEST_SHELLSYNTAX (shellsyntax)
*TEST_XML (xml)
*TEST_IPV6 (part of elf inspection in rpminspect)
*TEST_EXECSHIELD (elf)
*TEST_NEEDED (DT_NEEDED)
*TEST_UPSTREAM (upstream; the BZ 'Rebase' keyword check against the
                Errata Tool bug list was not migrated, see below)
*TEST_PERMS (permissions and capabilities)
*TEST_MODPARM (kmod)
*TEST_MODPCIID (kmod)
*TEST_RPMCHANGE (arch and subpackages)
*TEST_CHANGELOG (changelog)
*TEST_PATHNAMES (pathmigration; the forbidden init paths are added
                 to forbidden_path_prefixes in the config file and
                 those are caught by 'addedfiles')
*TEST_SIZE (filesize)
*TEST_SYMLINK (symlinks)
*TEST_SPECFILE (disttag, license, and files)
*TEST_TYPES (types)
*TEST_FILEMOVE (movedfiles)
*TEST_ABI (abidiff and kmidiff)
*TEST_CONFIG (config and doc)
*TEST_PATCHES (patches)
*TEST_VIRUS (virus)
*TEST_POLITICS (politics)
*TEST_RPATH (runpath)
*TEST_METADATA (only checks for bad words, valid license, valid vendor,
                and valid buildhost)
*TEST_REQUIRES (rpmdeps)
*TEST_STRIP    (debuginfo)


Test categories excluded (see MISSING):
---------------------------------------
 TEST_BUILDLOG
 TEST_RPMLINT
 TEST_UPSTREAM (only the rebase keyword check)
 TEST_ELFLINT
 TEST_MULTILIB
 TEST_SPECFILE (only the 32-bit x86 $RPM_OPT_FLAGS check)
 TEST_METADATA (the 'fedora without red hat' string check)


+============+
| test suite |
+============+

Integration tests to write for rpminspect
-----------------------------------------

The test suite needs more integration tests written.  rpminspect is a
program you run at the command line and it reads RPM files for input.
The test suite is not simply a unit test suite, but rather a detailed
integration test suite that creates simulated RPM packages to trigger
pass and fail cases in each of the different inspections.

There are six input types to rpminspect:

    * Single source RPM
    * Two source RPMs to compare
    * Single binary RPM
    * Two binary RPMs to compare
    * A single Koji build
    * Two Koji builds to compare

The test suite carries baseclass.py that defines some base classes
that you can build on for the different integration tests.  They are:

    * Single source RPM              --> TestSRPM
    * Two source RPMs to compare     --> TestCompareSRPM
    * Single binary RPMs             --> TestRPMs
    * Two binary RPMs to compare     --> TestCompareRPMs
    * A single Koji build            --> TestKoji
    * Two Koji builds to compare     --> TestCompareKoji
    * A single module build          --> TestModule
    * Two module build to compare    --> TestCompareModules

The TestRPMs and TestCompareRPMs in practice are used to test single
binary RPMs and not multiple RPMs, but I chose the name a long time
ago for the class.

These classes set up the test environment with rpminspect from the
source tree, simulated configuration data, and then test RPM inputs
built using the 'rpmfluff' module (https://pagure.io/rpmfluff).  In
the case of base classes that deal with a single SRPM, RPM, or Koji
build, the class contains "self.rpm" that you can modify.  In the
compare bare classes, you have "self.before_rpm" and "self.after_rpm".

The base classes will invoke rpminspect and capture the output as
JSON.  You set "self.inspection", "self.result", and "self.waiverauth"
to the values you expect in the output from that test input.  The idea
is that the actual integration tests are mostly fill-in-the-blanks
type classes.  Some get more complicated due to limitations in
rpmfluff or something that just needs to be handled in a specific way.

The integration test suite needs to test each inspection with each
input type above and check the result of each test, both in the
passing and failing case.  All of the inspections are written as
lib/inspect_*.c files.  Read through those source files and look for
the lines with "add_result()" calls.  When add_result() is called,
that's where a specific test was performed.  Read the code here to
determine what it's looking for and then construct the test case to
test for the passing case and then another set of classes for the
failing case.

For example, if there's an inspection called "uppercase" and its job
is to check and make sure no files are installed with uppercase
letters, the integration test suite needs 12 different tests.  The
first 6 are for the inputs noted above and to test for the passing
case.  That is a file is installed with lowercase letters.  The next 6
are for the inputs again, but for the failing case.  That is,
construct one of the test RPMs to have a file with an uppercase name.

Keep in mind that some test cases only apply to SRPM files and some
only apply to binary RPMS, so that will impact the number of test
cases you will need.

The following inspections lack integration tests:

    javabytecode
    changedfiles (compare only...these do not apply to single package inputs)
    removedfiles (compare only...these do not apply to single package inputs)
    addedfiles (compare only...these do not apply to single package inputs)
    DT_NEEDED
    capabilities
    arch
    subpackages
    pathmigration
    abidiff
    kmidiff

There are plenty of functions that can use unit tests too.  Look
through the source in lib/ for functions that this would apply to and
feel free to add more unit tests under test/lib/.


+=======+
| Other |
+=======+

General functionality
---------------------

* In the [inspections] section in config files, all for "ALL = on"
  and "ALL = off" to toggle everything.  Similar to the command
  line option.

* Add verbose runtime reporting.  This is currently only available
  for downloading packages.  Need to figure out how to separate it
  from the test results.

* Text mode reporting formatting.  Allow a user-specified column width
  and align output on columns.

* Migrate to a TOML config file format--or a config file format that
  looks similar to something you would see in /etc but that we have
  our own parser for.  YAML is not ideal.  Though support for YAML
  must remain as it is already established and supported.  It would be
  nice to move the defaults over to not YAML.

* Drop the need to fork/exec msgunfmt and just read in the po files
  directly.  This should be possible and will give us the information
  necessary for comparison purposes.

* Drop the need to fork/exec desktop-file-validate if a library
  mechanism can be found instead.

* Translations.  Use po/rpminspect.pot as a template and add more
  languages.


Documentation
-------------

Developer guide
Testing guide
User guide
    Use Doxygen for the C source but tie that in with Sphinx so
    publishing can be done on readthedocs.io

Also rpminspect.yaml.5 documenting the configuration file and the
profile configuration files.
