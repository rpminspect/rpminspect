name: Extra CI

on:
    push:
        branches: [ master ]
        paths-ignore:
        - 'contrib/**'
        - 'data/**'
        - 'doc/**'
        - 'po/**'
        - 'regress/**'
        - 'utils/**'

jobs:
    x86_64:
        # Use containers on their ubuntu latest image
        runs-on: ubuntu-latest

        # Set up the matrix of distributions to test
        strategy:
            matrix:
                container: ["debian:testing", "debian:stable", "ubuntu", "opensuse/leap", "centos:centos8", "centos:centos7", "gentoo/stage3"]

        container:
            image: ${{ matrix.container }}

        # All of these steps run from within the main source
        # directory, so think of that as your $PWD
        steps:
            # Requirements before the git clone can happen
            - name: git clone requirements
              run: |
                  case "${{ matrix.container }}" in
                      opensuse*)
                          zypper install -y tar gzip
                          ;;
                      gentoo*)
                          emerge-webrsync
                          emerge dev-vcs/git
                          ;;
                  esac

            # This means clone the git repo
            - uses: actions/checkout@v2.1.0

            # Within the container, install the dependencies, build,
            # and run the test suite
            - name: Build and run the test suite
              run: |
                  case "${{ matrix.container }}" in
                      debian*|ubuntu*)
                          apt-get update
                          apt-get -y install make
                          ;;
                      centos*)
                          rpm --import /etc/pkg/rpm-gpg/*
                          dnf install -y epel-release make
                          ;;
                      opensuse*)
                          zypper install -y make
                          ;;
                  esac
                  make instreqs
                  meson setup build --werror -Db_buildtype=debug -Db_coverage=true
                  ninja -C build -v
                  meson test -C build -v
                  ninja -C build coverage
                  curl -s https://codecov.io/bash | bash


#    archlinux:
#        # This job runs in a Docker container of the latest Arch Linux
#        # but the host is 'ubuntu-latest' since that's what GitHub
#        # Actions offers that's Linux.
#        runs-on: ubuntu-latest
#        container: archlinux/archlinux:base-devel
#
#        # All of these steps run from within the main source
#        # directory, so think of that as your $PWD
#        steps:
#            # Update the image
#            - name: pacman --noconfirm -Syu
#              run: |
#                  mkdir -p /var/lib/pacman/
#                  pacman --noconfirm -Syu
#
#            # Install Build Dependencies - Part I
#            - name: Install Build Dependencies - Part I
#              run: pacman --noconfirm -S make git
#
#            # This means clone the git repo
#            - uses: actions/checkout@v2
#
#            # Within the container, install the build dependencies and
#            # test suite dependencies
#            - name: Install Build Dependencies - Part II
#              run: make instreqs
#
#            # Set up the source tree to build
#            - name: setup
#              run: meson setup build --werror -Db_buildtype=debug -Db_coverage=true
#
#            # Compile the software
#            - name: build
#              run: ninja -C build -v
#
#            # Run the test suite
#            - name: test
#              run: meson test -C build -v
#
#            # Generate code coverage reports (requires
#            # -Db_coverage=true on 'meson setup')
#            - name: coverage
#              run: |
#                  ninja -C build coverage
#                  curl -s https://codecov.io/bash | bash



#    opensuse-tumbleweed:
#        # This job runs in a Docker container of OpenSUSE Tumbleweed
#        # but the host is 'ubuntu-latest' since that's what GitHub
#        # Actions offers that's Linux.
#        runs-on: ubuntu-latest
#        container: opensuse/tumbleweed
#
#        # All of these steps run from within the main source
#        # directory, so think of that as your $PWD
#        steps:
#            # Install required packages for the git checkout action
#            - name: Install required git checkout packages
#              run: zypper install -y git busybox systemd-sysvinit tar gzip
#
#            # This means clone the git repo
#            - uses: actions/checkout@v2
#
#            # Within the container, install the build dependencies and
#            # test suite dependencies
#            - name: Install Build Dependencies
#              run: |
#                  zypper install -y make
#                  make instreqs
#
#            # Set up the source tree to build
#            - name: setup
#              run: meson setup build --werror -Db_buildtype=debug -Db_coverage=true
#
#            # Compile the software
#            - name: build
#              run: ninja -C build -v
#
#            # Run the test suite
#            - name: test
#              run: meson test -C build -v
#
#            # Generate code coverage reports (requires
#            # -Db_coverage=true on 'meson setup')
#            - name: coverage
#              run: |
#                  ninja -C build coverage
#                  curl -s https://codecov.io/bash | bash
