name: Extra CI

on:
    push:
        branches: [ master ]
        paths-ignore:
        - AUTHORS.md
        - CC-BY-4.0.txt
        - CODE_OF_CONDUCT.md
        - COPYING
        - COPYING.LIB
        - HISTORY
        - LICENSE-2.0.txt
        - MISSING
        - README.md
        - TODO
        - 'contrib/**'
        - 'data/**'
        - 'doc/**'
        - 'po/**'
        - 'regress/**'
        - 'utils/**'

jobs:
    x86_64:
        # Use containers on their ubuntu latest image
        runs-on: ubuntu-latest

        # Set up the matrix of distributions to test
        strategy:
            matrix:
                # This one frequently breaks.  Like installing
                # packages doesn't work.  I am not convinced
                # tumbleweed is useful in the CI environment.
                #container: ["opensuse/tumbleweed"]

                container: ["centos:centos8",
                            "centos:centos7",
                            "ubuntu:latest",
                            "debian:stable",
                            "debian:testing",
                            "opensuse/leap",
                            "archlinux/archlinux:base-devel",
                            "gentoo/stage3",
                            "alpine:latest",
                            "almalinux:8",
                            "rockylinux/rockylinux",
                            "amazonlinux:2",
                            "mageia:latest",
                            "alt:latest",
                            "oraclelinux:8"]

        container:
            image: ${{ matrix.container }}

        # All of these steps run from within the main source
        # directory, so think of that as your $PWD
        steps:
            # Requirements before the git clone can happen
            - name: git clone requirements
              run: |
                  case "${{ matrix.container }}" in
                      alpine*)
                          apk add git
                          ;;
                      archlinux*)
                          mkdir -p /var/lib/pacman/
                          pacman --noconfirm -Syu
                          pacman --noconfirm -S git
                          ;;
                      centos*|almalinux*|rocky*)
                          yum install -y epel-release
                          rpm --import /etc/pki/rpm-gpg/*
                          yum install -y git
                          ;;
                      oraclelinux*)
                          # Oracle's EPEL copy
                          mkdir -p /etc/yum.repos.d
                          echo '[ol8_developer_EPEL]' > /etc/yum.repos.d/ol8-epel.repo
                          echo 'name= Oracle Linux $releasever EPEL ($basearch)' >> /etc/yum.repos.d/ol8-epel.repo
                          echo 'baseurl=https://yum.oracle.com/repo/OracleLinux/OL8/developer/EPEL/$basearch/' >> /etc/yum.repos.d/ol8-epel.repo
                          echo 'gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle' >> /etc/yum.repos.d/ol8-epel.repo
                          echo 'gpgcheck=1' >> /etc/yum.repos.d/ol8-epel.repo
                          echo 'enabled=1' >> /etc/yum.repos.d/ol8-epel.repo

                          # Turn on all the other repos
                          sed -i -e 's|enabled=0|enabled=1|g' /etc/yum.repos.d/oracle-linux-ol8.repo

                          dnf makecache
                          dnf install -y git
                          ;;
                      debian*|ubuntu*|alt*)
                          apt-get update
                          apt-get install -y git
                          ;;
                      gentoo*)
                          emerge-webrsync
                          emerge dev-vcs/git
                          ;;
                      opensuse*)
                          zypper install -y git
                          ;;
                      amazonlinux*)
                          amazon-linux-extras install epel -y
                          rpm --import /etc/pki/rpm-gpg/*
                          yum install -y git
                          ;;
                      mageia*)
                          dnf install -y git
                          ;;
                  esac

            # This means clone the git repo
            - uses: actions/checkout@v2.1.0

            # Within the container, install the dependencies, build,
            # and run the test suite
            - name: Build and run the test suite
              run: |
                  # Install make(1) so we can use the instreqs target
                  case "${{ matrix.container }}" in
                      alpine*)
                          apk add make
                          ;;
                      archlinux*)
                          pacman --noconfirm -S make
                          ;;
                      centos*|almalinux*|rocky*|amazonlinux*)
                          yum install -y make
                          ;;
                      debian*|ubuntu*|alt*)
                          apt-get install -y make
                          ;;
                      opensuse*)
                          zypper install -y make
                          ;;
                      mageia*|oraclelinux*)
                          dnf install -y make
                          ;;
                  esac

                  # Install build dependencies and set up the target
                  make instreqs

                  # Build the software and run the test suite
                  case "${{ matrix.container }}" in
                      alt*)
                          # Set the build up to run as a non-root user for Alt Linux
                          SRC="$(pwd)"
                          HME="/home/tester"
                          DST="${HME}/$(basename "${SRC}")"
                          cp -pr "${SRC}" "${HME}"
                          chown -R tester:tester "${DST}"

                          # Run the build and test suite as non-root
                          cd "${DST}"
                          sudo -u tester meson setup build --werror -Db_buildtype=debug -Db_coverage=true
                          sudo -u tester ninja -C build -v
                          sudo -u tester meson test -C build -v
                          sudo -u tester ninja -C build coverage
                          curl -s https://codecov.io/bash | bash
                          ;;
                      *)
                          meson setup build --werror -Db_buildtype=debug -Db_coverage=true
                          ninja -C build -v
                          meson test -C build -v
                          ninja -C build coverage
                          curl -s https://codecov.io/bash | bash
                          ;;
                  esac

    # Non-x86_64 architectures for Fedora, Ubuntu, Debian, Arch, and Alpine
    # https://github.com/uraimo/run-on-arch-action
    emulated:
        # GitHub Actions offers Ubuntu to run the job.
        runs-on: ubuntu-latest

        # Run steps on a matrix of arch/distro combinations
        strategy:
            matrix:
                arch: ["aarch64", "ppc64le", "s390x"]
                distro: ["fedora_latest"]

        # All of these steps run from within the main source
        # directory, so think of that as your $PWD
        steps:
            # This means clone the git repo
            - uses: actions/checkout@v2.1.0
            - uses: uraimo/run-on-arch-action@v2.0.5
              id: buildtest
              timeout-minutes: 500
              with:
                  arch: ${{ matrix.arch }}
                  distro: ${{ matrix.distro }}
                  githubToken: ${{ github.token }}

                  # The shell to run commands with in the container
                  shell: /bin/sh

                  # Within the container, install the dependencies
                  # required to use our Makefile
                  install: |
                      case "${{ matrix.distro }}" in
                          fedora*)
                              dnf remove -y fedora-repos-modular
                              dnf install -y make
                              ;;
                          debian*|buster|stretch|jessie)
                              apt-get update
                              apt-get -y install make
                              ;;
                      esac

                  # Build the software but skip the test.  The test
                  # suite takes way too long to run in the emulated
                  # environment.  If you want to run it in this
                  # emulated environment, you need to do it this way:
                  #
                  #    /bin/ls -1 test/test_*.py | while read tname ; do
                  #        tname="$(basename ${tname} .py | cut -d '_' -f 2)"
                  #        make check ${tname} || exit 1
                  #    done
                  #    curl -s https://codecov.io/bash | bash
                  #
                  run: |
                      make instreqs
                      meson setup build --werror -Db_buildtype=debug -Db_coverage=true
                      ninja -C build -v
